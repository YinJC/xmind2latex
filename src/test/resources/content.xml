<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-content xmlns="urn:xmind:xmap:xmlns:content:2.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink" timestamp="1398331524085" version="2.0"><sheet id="5l26bum9suqe0e6d9tu68aah3g" timestamp="1398331524085"><title>Sheet 1</title><topic id="6s485t13sljupq7ej553o9eahu" structure-class="org.xmind.ui.map.clockwise" style-id="22v88a2og6kttvi3cj2a8gq6a9" timestamp="1398330709988"><title>Effective Java 2</title><children><topics type="attached"><topic id="7ij8p8u4tsl6o1rj90l0r87jb9" timestamp="1398323521989"><title>Creating and Destroying Objects</title><children><topics type="attached"><topic id="1f4tic7pqa47qnk6i7ul470uau" timestamp="1398321651690"><title>Consider static factory method instead of constructor</title></topic><topic id="0uv7atc33bbhulrqs14dabqq5t" timestamp="1398321947311"><title svg:width="500">Consider a builder when faced with many constructor parameters</title></topic><topic id="5kloc17l7t3o9h67252fo8689u" timestamp="1398322441947"><title svg:width="500">Enforce the singleton property with a private constructor or an enum type</title></topic><topic id="544v8779f9cqbghp3j4u1brg47" timestamp="1398322932241"><title>Enforce noninstantiability with a private constructor</title></topic><topic id="7hre9v5vfe543no826lvgsja1u" timestamp="1398322978435"><title>Avoid creating unnecessary objects</title></topic><topic id="64gtintda9lmr7e5hbh0u3ofoh" timestamp="1398323514464"><title>Eliminate obsolete object references</title></topic><topic id="3v8338h2d2rsdflnu1okt15g1i" timestamp="1398323539394"><title>Avoid finalizers</title></topic></topics></children></topic><topic id="0h8tfi5lokk9jndu6ev9hrjqgq" timestamp="1398326044715"><title>Method Common to All Object</title><children><topics type="attached"><topic id="4b5eqrl9icel2o374p82uodbuu" timestamp="1398324016393"><title>Obey the general contract when overriding equals</title></topic><topic id="7j2mojtq80pgicfs4if6t88ihv" timestamp="1398324051081"><title>Always override hashCode when you override equals</title></topic><topic id="2o90qi41aeig0js96ksd8rn8ns" timestamp="1398324070672"><title>Always override toString</title></topic><topic id="165qnsd4dkjl19q090ltl5d4ub" timestamp="1398324112344"><title>Override clone judiciously</title></topic><topic id="5rhjl2on60j570t977edv4sdnb" timestamp="1398325434579"><title>Consider implementing Comparable</title></topic></topics></children></topic><topic id="1pl674hcsrq4vi2gspihv7f7nr" timestamp="1398326047948"><title>Classes and Interfaces</title><children><topics type="attached"><topic id="4uevjghooihcg08ijrdfq1jqem" timestamp="1398326047659"><title>Minimize the accessibility of the classes and members</title></topic><topic id="0h4slflv6bndgf2be5phk7krch" timestamp="1398326047659"><title svg:width="500">In public classes, use public accessor method, not public fields</title></topic><topic id="3tju2pbm5ma7defdual42f6kn1" timestamp="1398326047659"><title>Minimize mutability</title></topic><topic id="33oh214mvp8cc9pd959pt86f2n" timestamp="1398326047659"><title>Favor composition over inheritance</title></topic><topic id="7ci18ghuur1u7b2h8lnoivmgk3" timestamp="1398326047659"><title>Design or document inheritance or else prohibit it</title></topic><topic id="1tc72g30jqf6iieco9jln22p9p" timestamp="1398326047659"><title>Prefer interfaces to abstract classes</title></topic><topic id="0evkhle4htk2jh2563qtoo09p9" timestamp="1398326047660"><title>Use interfaces only to define types</title></topic><topic id="3t6ui5aqatuds8m7uu5nfrb4qb" timestamp="1398326047660"><title>Prefer class hierarchies to tagged classes</title></topic><topic id="0v731c2pnsi9aulrh9toimsoej" timestamp="1398326047660"><title>Use function objects to represent strategies</title></topic><topic id="2oo62afj4bdpkj97ijgv6mq49r" timestamp="1398326047660"><title>Favor static member classes over nonstatic</title></topic></topics></children></topic><topic id="7c0ug0ch4g75ut5vorcoikqpam" timestamp="1398328710777"><title>Generics</title><children><topics type="attached"><topic id="6ltsqgha7vbdto7logccesk936" timestamp="1398328505692"><title>Don't use raw types in new code</title></topic><topic id="2moaeeevlvid398k5aapqt9itg" timestamp="1398328531305"><title>Eliminate unchecked warnings</title></topic><topic id="2gm69bpgg7a41ks8odbcbrhige" timestamp="1398328550952"><title>Prefer lists to arrays</title></topic><topic id="6jnfaq9ptd5taqs7e5i70gjd6f" timestamp="1398328564727"><title>Favor generic types</title></topic><topic id="7ootufk84shcrlm0ujl3j3iin5" timestamp="1398328579580"><title>Favor generic methods</title></topic><topic id="7d0nkfpmvo9q9t9u53o3bf2604" timestamp="1398328647544"><title>Use bounded wildcards to increase API flexibility</title></topic><topic id="2gu3lp13e2vjcehr9n3ce9up3l" timestamp="1398328701195"><title>Consider typesafe heterogenous containers </title></topic></topics></children></topic><topic id="61fkth7d73s866neov6sjd3v2t" timestamp="1398328969203"><title>Enums and Annotations</title><children><topics type="attached"><topic id="5hat5gm683hds2dq2ilolkq96n" timestamp="1398328752206"><title>Use enum instead of int constants</title></topic><topic id="4058olclkk66s0uib8jh4vp2os" timestamp="1398328787138"><title>Use instance fields instead of ordinals</title></topic><topic id="67cafur5vcfo0rjs5r43m1f332" timestamp="1398328818448"><title>Use EnumSet instead of bit fields</title></topic><topic id="7htd72192v6op0q8m059r3h6b4" timestamp="1398328860381"><title>Use EnumMap instead of ordinal indexing</title></topic><topic id="0gogmho7l99ef3keiuf0e2la8b" timestamp="1398328922147"><title>Emulate extensible enums with interfaces</title></topic><topic id="7df315g2161tiujh972c7ao5bp" timestamp="1398328952705"><title>Prefer annotations to naming pattern</title></topic><topic id="31saglt2d24n0radb7l3d7ribq" timestamp="1398328967759"><title>Use marker interface to define types</title></topic></topics></children></topic><topic id="72lnashrtv133tlp92gk95upm3" timestamp="1398329145937"><title>Methods</title><children><topics type="attached"><topic id="30hvjj7tpm34b2mr8se4lubm7a" timestamp="1398329012216"><title>Check parameters for validity</title></topic><topic id="2h5cn3airq3hgkipo1uqk4ne8j" timestamp="1398329050191"><title>Make defensive copy when needed</title></topic><topic id="0a1ordiirtidk12bl245rq49im" timestamp="1398329076398"><title>Design method signatures carefully</title></topic><topic id="2h8jp8k3t3u09lcdimgqdftet3" timestamp="1398329096408"><title>Use overloading judiciously</title></topic><topic id="1fd42npb0phs9d00vt384p25c0" timestamp="1398329115606"><title>Use varargs judiciously</title></topic><topic id="097kmpldp5lqh57q45pvbcelcg" timestamp="1398329145787"><title>Return empty arrays or collection, not null</title></topic><topic id="7h37k0m1p2qtfk60moqa9dqu7o" timestamp="1398329209478"><title>Write doc comments for all exposed API elements</title></topic></topics></children></topic><topic id="1pr46ehf9n7nhkcbknurnnkhth" timestamp="1398330672807"><title>General Programming</title><children><topics type="attached"><topic id="29vq10d20i29m3po6pjej4t7qb" timestamp="1398330119733"><title>Minimize the scope of local variables</title></topic><topic id="5i7b91o98lnc9mm5tfjidbvknf" timestamp="1398330177035"><title>Prefer for-each loops to traditional for loops</title></topic><topic id="42jseua9eigpjftocil0uhqjpg" timestamp="1398330208382"><title>Know and use the libraries</title></topic><topic id="6p1u875smc7aur08v350pf5ijv" timestamp="1398330256843"><title>Avoid use float and double if exact answers are required</title></topic><topic id="5sp228g4u7pn9c94qdikq5qd5b" timestamp="1398330503667"><title>Prefer primitive types to boxed primitives</title></topic><topic id="1828857bgt4eu3g9ibu8qp9cd8" timestamp="1398330557155"><title>Avoid strings when other types are more appropriate</title></topic><topic id="3adkshqjnrrt8jil2c8j5fb0ud" timestamp="1398330588803"><title>Beware of the performance of string concatenation</title></topic><topic id="5dqhsg9pj1nfvdjtrs0j2kpg0u" timestamp="1398330629919"><title>Refer to objects by their interfaces</title></topic><topic id="6krsine5ih6qtvvbhtvshillfa" timestamp="1398330646259"><title>Prefer interfaces to reflection</title></topic><topic id="4asaadrb4cn559tuerick7i0i6" timestamp="1398330658580"><title>Use native methods judiciously</title></topic><topic id="4mat9t2r67tb8ih1vhjv4b2sv0" timestamp="1398330672421"><title>Optimize judiciously</title></topic><topic id="3j5n0fm51msfh4apr6n94kro0r" timestamp="1398330712811"><title>Adhere to generally accepted naming conventions</title></topic></topics></children></topic><topic id="0vp1cj76me1mnc04cpv4im3b2e" timestamp="1398331135317"><title>Exceptions</title><children><topics type="attached"><topic id="1jpjsdrdtn2crc2ufao0q89ffd" timestamp="1398330741847"><title>Use exceptions only for exceptional condition</title></topic><topic id="1j0u27na5ck434380rrc565lji" timestamp="1398330812128"><title svg:width="500">Use checked exceptions for recoverable conditions and runtime exceptions for programming errors</title></topic><topic id="171659icqp77crimed1eeq13bl" timestamp="1398330833894"><title>Avoid unnecessary use of checked exceptions</title></topic><topic id="3a8fh33pvhtni1oeqap8lvo6l7" timestamp="1398330856961"><title>Favor the use of standard exceptions</title></topic><topic id="61o109da4c3fn0homdnldbqvrf" timestamp="1398330896274"><title>Throw exceptions appropriate to the abstraction</title></topic><topic id="5fpb2daqnt3jn3e37s0qgeqfbb" timestamp="1398330923298"><title>Document all the exception thrown by each method</title></topic><topic id="0620ue2f1rvj03mcjd8riuq8pu" timestamp="1398330964632"><title>Include failure-capture information in detail messages</title></topic><topic id="6141ckp24hale6l6atfhil7q1v" timestamp="1398330997538"><title>Strive for failure atomicity</title></topic><topic id="0haeqit691crbhc4f7bjditb5s" timestamp="1398331005613"><title>Don't ignore exceptions</title></topic></topics></children></topic><topic id="5lclhn8n3oobq03jvs0ndi2e4c" timestamp="1398331293248"><title>Concurrency</title><children><topics type="attached"><topic id="4eedcp8qhsnbh0u7v4bdvucanh" timestamp="1398331137813"><title>Synchronize access to shared mutable data</title></topic><topic id="3i1h7agh9o7b23rmirql32r5hr" timestamp="1398331137813"><title>Prefer executors and tasks to threads</title></topic><topic id="1vgs6tvoa49o4t3m2fhksfbs7a" timestamp="1398331137813"><title>Prefer concurrent utilities to wait and notify</title></topic><topic id="1js44iapmof0od7kokqh6c4560" timestamp="1398331137813"><title>Document thread safety</title></topic><topic id="3rnos2gd1t5r0rmqfsn075crdr" timestamp="1398331196979"><title>Use lazy initialization judiciously</title></topic><topic id="09c1se29tl3ns6memoiluctm5b" timestamp="1398331209957"><title>Don't depend on thread scheduler</title></topic><topic id="5akbmve6odqc3lujnu6cokuc12" timestamp="1398331297722"><title>Avoid thread group</title></topic></topics></children></topic><topic id="2nbdd5vcj4rs7i4fegpj2pgjp2" timestamp="1398331459959"><title>Serialization</title><children><topics type="attached"><topic id="6aki6d4l1ec0d07hv9o5p35t1m" timestamp="1398331385057"><title>Implement Serializable judiciously</title></topic><topic id="2kubu66ttbkvjghlhi7btgicvo" timestamp="1398331410308"><title>Consider use a custom serialized form</title></topic><topic id="7dvesoi8397bp266isqj4arj8m" timestamp="1398331432309"><title>Write readObject methods defensively</title></topic><topic id="4cqsf59a40h63a7d0cohaob7jn" timestamp="1398331459775"><title>For instance control, prefer enum types to readResolve</title></topic><topic id="5pqf00jgt016per9jq336qnpar" timestamp="1398331510745"><title>Consider serialization proxies instead of serialized instances</title></topic></topics></children></topic></topics></children></topic></sheet></xmap-content>